<SoftBox className="property-editor"
                sx={{
                    p: 1,
                    my: 1,
                    border: '1px solid #ccc',
                    borderRadius: 1,
                    bgcolor: '#ffffff',
                    display: showPropertyEditor ? 'flex' : 'none',
                    alignItems: 'center',
                    flexDirection: 'column',
                    position: 'fixed',
                    right: '20px',
                    top: '20px',
                    width: '250px',
                    zIndex: 1000,
                    boxShadow: '0 2px 10px rgba(0,0,0,0.1)'
                }}
            >
                <SoftBox sx={{ 
                    width: '100%', 
                    display: 'flex', 
                    justifyContent: 'space-between', 
                    alignItems: 'center', 
                    mb: 2,
                    borderBottom: '1px solid #eee',
                    pb: 1
                }}>
                    <SoftTypography
                        component="label" 
                        variant="caption" 
                        fontWeight="bold" 
                        fontSize="1rem" 
                        sx={{ color: "#4d6b5c" }}
                    >
                        Property Editor
                    </SoftTypography>
                    <IconButton 
                        size="small" 
                        onClick={() => setShowPropertyEditor(false)}
                        sx={{ 
                            padding: '4px',
                            '&:hover': {
                                backgroundColor: 'rgba(0,0,0,0.04)'
                            }
                        }}
                    >
                        <CloseIcon fontSize="small" />
                    </IconButton>
                </SoftBox>

                {selectedElement && (
                    <SoftBox sx={{ width: "100%" }}>
                        {!selectedElement.classList.contains('grid-stack-sub-grid') && (
                            <SoftBox>
                                <SoftTypography component="label" variant="caption" fontWeight="bold" fontSize="0.875rem" sx={{ my: 1, color: "#4d6b5c" }}>
                                    Background Color:
                                </SoftTypography>
                                <SoftInput
                                    type="color"
                                    value={elementProperties[selectedElement.id]?.backgroundColor || '#ffffff'}
                                    onChange={(e) => updateElementProperty('backgroundColor', e.target.value)}
                                />
                                <SoftTypography component="label" variant="caption" fontWeight="bold" fontSize="0.875rem" sx={{ my: 1, color: "#4d6b5c" }}>
                                    Border Color:
                                </SoftTypography>
                                <SoftInput
                                    type="color"
                                    value={elementProperties[selectedElement.id]?.borderColor || '#000000'}
                                    onChange={(e) => updateElementProperty('borderColor', e.target.value)}
                                />
                            </SoftBox>
                        )}
                        {selectedElement.classList.contains('grid-stack-sub-grid') && (
                            <SoftBox>
                                <SoftInput
                                    type="text"
                                    value={elementProperties[selectedElement.id]?.grouplabel || "Nested Grid"}
                                    onChange={(e) => updateElementProperty('grouplabel', e.target.value)}
                                    placeholder="Enter nested grid label"
                                />
                                <SoftTypography component="label" variant="caption" fontWeight="bold" fontSize="0.875rem" sx={{ my: 1, color: "#4d6b5c" }}>
                                    Border Color:
                                </SoftTypography>
                                <SoftInput
                                    type="color"
                                    value={elementProperties[selectedElement.id]?.borderColor || '#000000'}
                                    onChange={(e) => updateElementProperty('borderColor', e.target.value)}
                                />
                            </SoftBox>
                        )}
                    </SoftBox>
                )}
            </SoftBox>

            {!showPropertyEditor && selectedElement && (
                <SoftButton
                    variant="contained"
                    color="info"
                    size="small"
                    onClick={() => setShowPropertyEditor(true)}
                    sx={{
                        position: 'fixed',
                        right: '20px',
                        top: '20px',
                        zIndex: 1000
                    }}
                >
                    Show Properties
                </SoftButton>
            )}